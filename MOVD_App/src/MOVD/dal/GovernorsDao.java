package MOVD.dal;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import MOVD.model.*;

public class GovernorsDao {
  protected ConnectionManager connectionManager;

  private static GovernorsDao instance = null;

  protected GovernorsDao() {
    connectionManager = new ConnectionManager();
  }

  public static GovernorsDao getInstance() {
    if (instance == null) {
      instance = new GovernorsDao();
    }
    return instance;
  }

  /**
   * Create a Governors object in the SQL file.
   */
  public Governors create(Governors governor) throws SQLException {
    String insertGovernor = "INSERT INTO governors(state, statenameslug, statecode, statecodeslug, votesmart, " +
            "title, party, name, nameslug, firstname, middlename, lastname, namesuffix, goesby, pronunciation, " +
            "gender, ethnicity, religion, openlylgbtq, dateofbirth, enteredoffice, termend, biography, phone, " +
            "fax, latitude, longitude, addresscomplete, addressnumber, addressprefix, addressstreet, " +
            "addresssecunittype, addresssecunitnum, addresscity, addressstate, addresszipcode, addresstype, " +
            "website, contactpage, facebookurl, twitterhandle, twitterurl, photourl) " +
            "VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
    Connection connection = null;
    PreparedStatement insertStmt = null;
    ResultSet resultKey = null;
    try {
      connection = connectionManager.getConnection();
      insertStmt = connection.prepareStatement(insertGovernor, Statement.RETURN_GENERATED_KEYS);


      int i = 1;
      insertStmt.setString(i++, governor.getState());
      insertStmt.setString(i++, governor.getStateNameSlug());
      insertStmt.setString(i++, governor.getStateCode());
      insertStmt.setString(i++, governor.getStateCodeSlug());
      insertStmt.setString(i++, governor.getVoteSmart());
      insertStmt.setString(i++, governor.getTitle());
      insertStmt.setString(i++, governor.getParty());
      insertStmt.setString(i++, governor.getName());
      insertStmt.setString(i++, governor.getNameSlug());
      insertStmt.setString(i++, governor.getFirstName());
      insertStmt.setString(i++, governor.getMiddleName());
      insertStmt.setString(i++, governor.getLastName());
      insertStmt.setString(i++, governor.getDateOfBirth());
      insertStmt.setString(i++, governor.getEnteredOffice());
      insertStmt.setString(i++, governor.getTermEnd());
      insertStmt.setString(i++, governor.getBiography());
      insertStmt.setString(i++, governor.getPhone());
      insertStmt.setString(i++, governor.getFax());
      insertStmt.setString(i++, governor.getLatitude());
      insertStmt.setString(i++, governor.getLongitude());
      insertStmt.setString(i++, governor.getAddressComplete());
      insertStmt.setString(i++, governor.getAddressNumber());
      insertStmt.setString(i++, governor.getAddressPrefix());
      insertStmt.setString(i++, governor.getAddressStreet());
      insertStmt.setString(i++, governor.getAddressCity());
      insertStmt.setString(i++, governor.getAddressSecUnitType());
      insertStmt.setString(i++, governor.getAddressSecUnitNum());
      insertStmt.setString(i++, governor.getAddressCity());
      insertStmt.setString(i++, governor.getAddressState());
      insertStmt.setString(i++, governor.getAddressZipcode());
      insertStmt.setString(i++, governor.getAddressType());
      insertStmt.setString(i++, governor.getWebsite());
      insertStmt.setString(i++, governor.getContactPage());
      insertStmt.setString(i++, governor.getFacebookUrl());
      insertStmt.setString(i++, governor.getTwitterHandle());
      insertStmt.setString(i++, governor.getTwitterUrl());
      insertStmt.setString(i, governor.getPhotoUrl());

      insertStmt.executeUpdate();
      resultKey = insertStmt.getGeneratedKeys();
      long governorKey = -1;
      if (resultKey.next()) {
        governorKey = resultKey.getLong(1);
      } else {
        throw new SQLException("Unable to retrieve autogenerated governorKey");
      }
      governor.setGovernorsPk(governorKey);

      return governor;
    } catch (SQLException e) {
      e.printStackTrace();
      throw e;
    } finally {
      if (connection != null) {
        connection.close();
      }
      if (insertStmt != null) {
        insertStmt.close();
      }
      if (resultKey != null) {
        resultKey.close();
      }
    }
  }

  /**
   * Return a govenor by state.
   */
  public Governors getRecordByState(String searchState) throws SQLException {
    String select = "SELECT * FROM governors WHERE State=?";
    Connection connection = null;
    PreparedStatement selectStmt = null;
    ResultSet results = null;
    try {
      connection = connectionManager.getConnection();
      selectStmt = connection.prepareStatement(select);
      selectStmt.setString(1, searchState);
      results = selectStmt.executeQuery();
      if (results.next()) {
        long governorsPk = results.getLong("Governors_pk");
        String state = results.getString("State");
        String stateNameSlug = results.getString("StateNameSlug");
        String stateCode = results.getString("StateCode");
        String stateCodeSlug = results.getString("StateCodeSlug");
        String voteSmart = results.getString("VoteSmart");
        String title = results.getString("Title");
        String party = results.getString("Party");
        String name = results.getString("Name");
        String nameSlug = results.getString("NameSlug");
        String firstName = results.getString("FirstName");
        String middleName = results.getString("MiddleName");
        String lastName = results.getString("LastName");
        String nameSuffix = results.getString("NameSuffix");
        String goesBy = results.getString("GoesBy");
        String pronunciation = results.getString("Pronunciation");
        String gender = results.getString("Gender");
        String ethnicity = results.getString("Ethnicity");
        String religion = results.getString("Religion");
        String openlyLgbtq = results.getString("OpenlyLGBTQ");
        String dateOfBirth = results.getString("DateOfBirth");
        String enteredOffice = results.getString("EnteredOffice");
        String termEnd = results.getString("TermEnd");
        String biography = results.getString("Biography");
        String phone = results.getString("Phone");
        String fax = results.getString("Fax");
        String latitude = results.getString("Latitude");
        String longitude = results.getString("Longitude");
        String addressComplete = results.getString("AddressComplete");
        String addressNumber = results.getString("AddressNumber");
        String addressPrefix = results.getString("AddressPrefix");
        String addressStreet = results.getString("AddressStreet");
        String addressSecUnitType = results.getString("AddressSecUnitType");
        String addressSecUnitNum = results.getString("AddressSecUnitNum");
        String addressCity = results.getString("AddressCity");
        String addressState = results.getString("AddressState");
        String addressZipcode = results.getString("AddressZipcode");
        String addressType = results.getString("AddressType");
        String website = results.getString("Website");
        String contactPage = results.getString("ContactPage");
        String facebookUrl = results.getString("FacebookUrl");
        String twitterHandle = results.getString("TwitterHandle");
        String twitterUrl = results.getString("TwitterUrl");
        String photoUrl = results.getString("PhotoUrl");

        Governors record = new Governors(governorsPk, state, stateNameSlug, stateCode, stateCodeSlug,
                voteSmart, title, party, name, nameSlug, firstName, middleName, lastName, nameSuffix,
                goesBy, pronunciation, gender, ethnicity, religion, openlyLgbtq, dateOfBirth,
                enteredOffice, termEnd, biography, phone, fax, latitude, longitude, addressComplete,
                addressNumber, addressPrefix, addressStreet, addressSecUnitType, addressSecUnitNum,
                addressCity, addressState, addressZipcode, addressType, website, contactPage,
                facebookUrl, twitterHandle, twitterUrl, photoUrl);

        return record;
      }
    } catch (SQLException e) {
      e.printStackTrace();
      throw e;
    } finally {
      if (connection != null) {
        connection.close();
      }
      if (selectStmt != null) {
        selectStmt.close();
      }
      if (results != null) {
        results.close();
      }
    }
    return null;

  }

  /**
   * Update all the values for a  governor object by providing a new object.
   */
  public Governors update(Governors governor, Governors newValues) throws SQLException {
    String updateGovernor = "UPDATE governors " +
            "SET state=?, statenameslug=?, statecode=?, statecodeslug=?, votesmart=?, " +
            "title=?, party=?, name=?, nameslug=?, firstname=?, middlename=?, lastname=?, namesuffix=?, goesby=?, pronunciation=?, " +
            "gender=?, ethnicity=?, religion=?, openlylgbtq=?, dateofbirth=?, enteredoffice=?, termend=?, biography=?, phone=?, " +
            "fax=?, latitude=?, longitude=?, addresscomplete=?, addressnumber=?, addressprefix=?, addressstreet=?, " +
            "addresssecunittype=?, addresssecunitnum=?, addresscity=?, addressstate=?, addresszipcode=?, addresstype=?, " +
            "website=?, contactpage=?, facebookurl=?, twitterhandle=?, twitterurl=?, photourl=? " +
            "WHERE Governors_pk=?; ";
    Connection connection = null;
    PreparedStatement updateStmt = null;
    try {
      connection = connectionManager.getConnection();
      updateStmt = connection.prepareStatement(updateGovernor, Statement.RETURN_GENERATED_KEYS);

      int i = 1;
      updateStmt.setString(i++, newValues.getState());
      updateStmt.setString(i++, newValues.getStateNameSlug());
      updateStmt.setString(i++, newValues.getStateCode());
      updateStmt.setString(i++, newValues.getStateCodeSlug());
      updateStmt.setString(i++, newValues.getVoteSmart());
      updateStmt.setString(i++, newValues.getTitle());
      updateStmt.setString(i++, newValues.getParty());
      updateStmt.setString(i++, newValues.getName());
      updateStmt.setString(i++, newValues.getNameSlug());
      updateStmt.setString(i++, newValues.getFirstName());
      updateStmt.setString(i++, newValues.getMiddleName());
      updateStmt.setString(i++, newValues.getLastName());
      updateStmt.setString(i++, newValues.getDateOfBirth());
      updateStmt.setString(i++, newValues.getEnteredOffice());
      updateStmt.setString(i++, newValues.getTermEnd());
      updateStmt.setString(i++, newValues.getBiography());
      updateStmt.setString(i++, newValues.getPhone());
      updateStmt.setString(i++, newValues.getFax());
      updateStmt.setString(i++, newValues.getLatitude());
      updateStmt.setString(i++, newValues.getLongitude());
      updateStmt.setString(i++, newValues.getAddressComplete());
      updateStmt.setString(i++, newValues.getAddressNumber());
      updateStmt.setString(i++, newValues.getAddressPrefix());
      updateStmt.setString(i++, newValues.getAddressStreet());
      updateStmt.setString(i++, newValues.getAddressCity());
      updateStmt.setString(i++, newValues.getAddressSecUnitType());
      updateStmt.setString(i++, newValues.getAddressSecUnitNum());
      updateStmt.setString(i++, newValues.getAddressCity());
      updateStmt.setString(i++, newValues.getAddressState());
      updateStmt.setString(i++, newValues.getAddressZipcode());
      updateStmt.setString(i++, newValues.getAddressType());
      updateStmt.setString(i++, newValues.getWebsite());
      updateStmt.setString(i++, newValues.getContactPage());
      updateStmt.setString(i++, newValues.getFacebookUrl());
      updateStmt.setString(i++, newValues.getTwitterHandle());
      updateStmt.setString(i++, newValues.getTwitterUrl());
      updateStmt.setString(i, newValues.getPhotoUrl());

      updateStmt.setLong(1, governor.getGovernorsPk());

      updateStmt.executeUpdate();

      newValues.setGovernorsPk(governor.getGovernorsPk());
      return newValues;
    } catch (SQLException e) {
      e.printStackTrace();
      throw e;
    } finally {
      if (connection != null) {
        connection.close();
      }
      if (updateStmt != null) {
        updateStmt.close();
      }
    }
  }

  /**
   * Delete a governor object from the database.
   */
  public Governors delete(Governors governor) throws SQLException {
    String deleteGovernor = "DELETE FROM governors WHERE Governors_pk=?";
    Connection connection = null;
    PreparedStatement deleteStmt = null;
    try {
      connection = connectionManager.getConnection();
      deleteStmt = connection.prepareStatement(deleteGovernor);
      deleteStmt.setLong(1, governor.getGovernorsPk());
      deleteStmt.executeUpdate();
      return null;
    } catch (SQLException e) {
      e.printStackTrace();
      throw e;
    } finally {
      if (connection != null) {
        connection.close();
      }
      if (deleteStmt != null) {
        deleteStmt.close();
      }
    }
  }
}
